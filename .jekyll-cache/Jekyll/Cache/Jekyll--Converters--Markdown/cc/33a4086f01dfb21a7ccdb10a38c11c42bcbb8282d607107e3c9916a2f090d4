I"g<h2 id="what-we-are-about-to-learn">What we are about to learn</h2>
<p>In This blog we will Learn how to Create a Test class for the Platform Event logic with valid unit testing.</p>

<h2 id="overview">Overview</h2>
<p>Platform Events are cool, fast, easy and optimized way to build an Integration between two sources with a real time sync. Platform events are easy to setup and publish as we discussed in our previous <a href="/Salesforce-spices/Setup-SF-PE-intro/">blog</a>.</p>

<p>Test class are compulsory in Salesforce with atleast 75% of code coverage but along with Code coverage an ideal class should have proper unit testing with System asserts for the performed logic in the main class.</p>

<p>Creating Test classes for Platform Events can be pain because Test classes cannot subscribe to the Platform Events till now so you never know if events are published successfully. In the below part we will see how to test out that if your Platform events are published successfully or stopped due to some error.</p>

<h3 id="main-class">Main Class</h3>

<pre><code class="language-Java">public without sharing class PublishEventsClass {
    
    @TestVisible private static Integer successPublishCount; //This variable will keep the Successful Events number

    public static void publishAccountDetails( List&lt;Account&gt; newAccounts ){
        List&lt;event__e&gt; eventsToPublish = new List&lt;event__e&gt;();
        for( Account acct : newAccounts ){
            eventsToPublish.add( new event__e( Name = acct.Name, website__c = acct.Website ) ); //Creating Events to Publish
        }

        if(!eventsToPublish.isEmpty()){
            List&lt;Database.SaveResult&gt; results = EventBus.publish(eventsToPublish); 
            successPublishCount = 0;
            for (Database.SaveResult sr : results) {
                if (sr.isSuccess()) {
                    System.debug('Successfully published event.');
                    successPublishCount += 1; //Increment for each successful event
                } else {
                    if( sr.getErrors().size() &gt; 0 ){
                        System.debug('Error::'+sr.getErrors().size());
                    }
                }
            }
        }
    }
}
</code></pre>

<h3 id="test-class-for-the-above-class">Test Class For The Above Class</h3>

<pre><code class="language-Java">@isTest
private without sharing class PublishEventsClassTest{
    
    @isTest
    public static void testMethodEx() {
        List&lt;Account&gt; accounts = new List&lt;Account&gt;();
        for( Integer i=0; i&lt;10; i++ ){
            accounts.add( new Account( Name = 'test '+i ) );
        }

        Test.startTest();
        PublishEventsClass.publishAccountDetails( accounts );
        Test.stopTest();

        System.assertEquals( accounts.size(), PublishEventsClass.successPublishCount, 'Platform Events not Published Successfully.' );
    }
}
</code></pre>

<p>I have created a tool recently that can subscribe to the Platform Events along with Push Topics and can show the real time information when you events are published. The tool name is Platform Event Tester ( I love being straight forward ;) ) its easy to use and open source. The tool utilizes Oauth2.0 to Authorize the Org so its secure and no risk involved.</p>

<p>You can find the tool <a href="https://pe-tester.herokuapp.com/">here</a>.</p>

<p>A video tutorial is below:</p>

<p><img src="/Salesforce-spices/assets/img/pe-tester-tutorial.gif" alt="Video tutorial PE-Tester" /></p>

<p>If you like this tool then you can support me on the repo <a href="https://github.com/AyuSharma-dev/PE-Tester">!here</a>.</p>

<h2 id="test-platform-events-using-apex-trigger">Test Platform Events using Apex Trigger</h2>

<p>Platform Events support After Trigger creation. So whenever the Platform Event published this Trigger will run and you can add System debugs here to debug the subscribed events detail that is passed on from another system.</p>

<p>You can use the below code as an example for Trigger.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Trigger for catching Low_Ink events.</span>
<span class="n">trigger</span> <span class="nc">TriggerName</span> <span class="n">on</span> <span class="nf">APINameOfPlatformEvent</span> <span class="o">(</span><span class="n">after</span> <span class="n">insert</span><span class="o">)</span> <span class="o">{</span>    
    
    <span class="k">for</span> <span class="o">(</span><span class="nc">EventName</span> <span class="n">event</span> <span class="o">:</span> <span class="nc">Trigger</span><span class="o">.</span><span class="na">New</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="err">'</span><span class="nc">Event</span> <span class="nl">Details:</span> <span class="err">'</span><span class="o">+</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<blockquote>
  <p>This case of testing Platform Events is not suggested because you have to create a Trigger just for the testing and it cannot be done on the Production env.</p>
</blockquote>

<p><br /></p>
<h2 id="debug-platform-events-when-publishing">Debug Platform Events when Publishing</h2>

<p>Another way to test Platform events is by Debugging the details at the moment when you publish the Events. You can update your Event publishing code from the below code</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Database</span><span class="o">.</span><span class="na">SaveResult</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">EventBus</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span> <span class="k">new</span> <span class="n">eventApiName</span><span class="o">(</span> <span class="n">Message__c</span><span class="o">=</span><span class="err">'</span><span class="nc">Test</span> <span class="nc">Message</span><span class="err">'</span> <span class="o">)</span> <span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="err">'</span><span class="nc">Successfully</span> <span class="n">published</span> <span class="n">event</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="c1">//"this will print the published information." </span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span> <span class="n">result</span><span class="o">.</span><span class="na">getErrors</span><span class="o">().</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="err">'</span><span class="nl">Error:</span><span class="o">:</span><span class="err">'</span><span class="o">+</span><span class="n">result</span><span class="o">.</span><span class="na">getErrors</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /><br />
So these are the various way we can use to Test out the Platform events. Checkout this [blog] to find to see how you can test the Events in Test class.</p>

<p>Thanks for Reading !!</p>
:ET